Folder Structure
--------------------------------------------------
./
    webpack.config.js
    README.md
    .gitignore
    package.json
    src/
        Lazy.js
        index.js
        App.js
        index.html
        components/
            CollectionCardsExample.js
            Section.js
            CardViewExample.js


File Contents
--------------------------------------------------


./webpack.config.js
File type: .js
/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const CssMinimizerPlugin = require("css-minimizer-webpack-plugin");
const {SwcMinifyWebpackPlugin} = require("swc-minify-webpack-plugin");
const {browserslistToTargets} = require('lightningcss');
const browserslist = require('browserslist');
const macros = require("unplugin-parcel-macros");

// Adjust this to target the browsers your product supports.
// https://browserslist.dev/
const BROWSERSLIST = 'last 2 Chrome versions, last 2 Safari versions, last 2 Firefox versions';

module.exports = (env, argv) => ({
  entry: path.join(__dirname, "src", "index.js"),
  output: {
    path: path.resolve(__dirname, "dist"),
  },
  mode: argv.mode || "development",
  module: {
    rules: [
      {
        // Use SWC to compile JSX. You could also use babel-loader instead.
        test: /\.?js$/,
        exclude: /node_modules/,
        use: {
          loader: "swc-loader",
          options: {
            env: {
              targets: BROWSERSLIST
            },
            jsc: {
              parser: {
                jsx: true
              }
            }
          },
        },
      },
      {
        // Use mini-css-extract-plugin instead of style-loader to that CSS is extracted
        // into a standalone .css bundle instead of inlined into JS via <style> tags.
        test: /\.css$/i,
        use: [MiniCssExtractPlugin.loader, "css-loader"],
      }
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: path.join(__dirname, "src", "index.html"),
    }),
    // Enable style macros.
    macros.webpack(),
    // Extract CSS bundles.
    new MiniCssExtractPlugin({
      // Use content hash in filename for long term cacheability.
      filename: "[name].[contenthash].css",
      // Ignore warnings about CSS order. Style macros generate atomic CSS,
      // which is resiliant to ordering differences.
      ignoreOrder: true,
    })
  ],
  optimization: {
    // Always enable minimizer plugins (even in development), to reduce duplicate CSS rules.
    minimize: true,
    minimizer: [
      // Minify JavaScript during the production build only.
      // (Used SWC here, but you can also use Terser if you prefer.)
      argv.mode === 'production'
        ? new SwcMinifyWebpackPlugin()
        : null,
      // Use lightningcss to compile CSS. This removes duplicate rules and outputs compatible CSS for your browserslist.
      // In production it also minifies.
      new CssMinimizerPlugin({
        minify: CssMinimizerPlugin.lightningCssMinify,
        minimizerOptions: {
          minify: argv.mode === 'production',
          targets: browserslistToTargets(browserslist(BROWSERSLIST))
        }
      })
    ],
    splitChunks: {
      cacheGroups: {
        // Bundle all S2 and style-macro generated CSS into a single bundle instead of code splitting.
        // Because atomic CSS has so much overlap between components, loading all CSS up front results in
        // smaller bundles instead of producing duplication between pages.
        s2: {
          name: 's2-styles',
          test(module) {
            return module.type === 'css/mini-extract' && (module.identifier().includes('@react-spectrum/s2') || /\.macro-(.*?)\.css/.test(module.identifier()));
          },
          chunks: 'all',
          enforce: true
        }
      }
    }
  }
});


--------------------------------------------------
File End
--------------------------------------------------


./README.md
File type: .md
# Webpack 5 example

This is a [Webpack](https://webpack.js.org/) project with a minimal React configuration.

## Getting Started

First, run the development server:

```bash
yarn install
yarn dev
```

Open [http://localhost:8080](http://localhost:8080) with your browser to see the result.

style-macro and React Spectrum - Spectrum 2 have been added to `src/App.js` to show an example of a Spectrum 2 styled component. This file does client side rendering. The page auto-updates as you edit the file.

## Macros config

Edit the webpack.config.js to add an import for the plugin and add a webpack config that adds the webpack version of the macros plugin. An empty config file would be updated to look like the following.

```
const macros = require("unplugin-parcel-macros");

module.exports = {
  // ...
  plugins: [
    // ...
    macros.webpack(),
    // ...
  ],
};
```

To use the spectrum-theme via macros, pass your styles object to the style() macro and set the result as a new function. This new function or style() should be used within a `className` prop to style your html elements. Use the `styles` prop on React Spectrum components.

```jsx
<div className={style({marginStart: 16})}>
  Hello Spectrum 2!
</div>
```

```jsx
<Button styles={style({marginStart: 16})}>
  Hello Spectrum 2!
</Button>
```

## Application setup

Please include the page level CSS in the root of your application to configure and support the light and dark themes.

```
import "@react-spectrum/s2/page.css";
```


--------------------------------------------------
File End
--------------------------------------------------


./.gitignore
File type: 
node_modules
build
.DS_Store
npm-debug.log
yarn-error.log
.yarnclean
.vscode
.idea

--------------------------------------------------
File End
--------------------------------------------------


./package.json
File type: .json
{
  "name": "webpack-5-example",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "packageManager": "yarn@4.2.2",
  "scripts": {
    "dev": "webpack serve",
    "build": "webpack --mode production"
  },
  "dependencies": {
    "@react-spectrum/s2": "latest",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "css-loader": "^6.10.0",
    "css-minimizer-webpack-plugin": "^7.0.0",
    "html-webpack-plugin": "^5.6.0",
    "lightningcss": "^1.27.0",
    "mini-css-extract-plugin": "^2.9.1",
    "style-loader": "^3.3.4",
    "swc-loader": "^0.2.6",
    "swc-minify-webpack-plugin": "^2.1.3",
    "unplugin-parcel-macros": "0.0.3",
    "webpack": "^5.91.0",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^5.0.4"
  }
}


--------------------------------------------------
File End
--------------------------------------------------


./src/Lazy.js
File type: .js
import React, {useState} from "react";
import "@react-spectrum/s2/page.css";
import {
  Accordion,
  ActionButton,
  AlertDialog,
  Avatar,
  AvatarGroup,
  Badge,
  Breadcrumb,
  Breadcrumbs,
  Button,
  ButtonGroup,
  Checkbox,
  CheckboxGroup,
  CloseButton,
  ColorArea,
  ColorField,
  ColorSlider,
  ColorSwatch,
  ColorSwatchPicker,
  ColorWheel,
  ComboBox,
  ComboBoxItem,
  Content,
  ContextualHelp,
  CustomDialog,
  Dialog,
  DialogContainer,
  DialogTrigger,
  Disclosure,
  DisclosureHeader,
  DisclosurePanel,
  DisclosureTitle,
  DropZone,
  Footer,
  Form,
  Header,
  Heading,
  IllustratedMessage,
  Image,
  InlineAlert,
  Keyboard,
  Link,
  Meter,
  NumberField,
  Picker,
  PickerItem,
  Popover,
  ProgressBar,
  ProgressCircle,
  Radio,
  RadioGroup,
  RangeSlider,
  SearchField,
  SegmentedControl,
  SegmentedControlItem,
  Slider,
  StatusLight,
  Switch,
  Tab,
  TabList,
  TabPanel,
  Tabs,
  Tag,
  TagGroup,
  Text,
  TextArea,
  TextField,
  Tooltip,
  TooltipTrigger,
} from "@react-spectrum/s2";
import Checkmark from '@react-spectrum/s2/illustrations/gradient/generic1/Checkmark';
import Cloud from "@react-spectrum/s2/illustrations/linear/Cloud";
import DropToUpload from "@react-spectrum/s2/illustrations/linear/DropToUpload";
import Edit from "@react-spectrum/s2/icons/Edit";
import Section from "./components/Section";
import { style } from "@react-spectrum/s2/style" with { type: "macro" };

export default function Lazy() {
  let [isDialogOpen, setIsDialogOpen] = useState(false);
  return (
    <>
      <Section title="Color">
        <ColorField label="Primary Color" />
        <ColorSwatchPicker>
          <ColorSwatch color="#A00" />
          <ColorSwatch color="#f80" />
          <ColorSwatch color="#080" />
          <ColorSwatch color="#08f" />
          <ColorSwatch color="#088" />
          <ColorSwatch color="#008" />
        </ColorSwatchPicker>
        <ColorSlider defaultValue="#7f0000" channel="red" />
        <ColorArea defaultValue="#7f0000" />
        <ColorWheel defaultValue="hsl(30, 100%, 50%)" />
      </Section>

      <Section title="Drag and Drop">
        <DropZone>
          <IllustratedMessage>
            <DropToUpload />
            <Heading>Drag and drop your file</Heading>
            <Content>Or, select a file from your computer</Content>
          </IllustratedMessage>
        </DropZone>
      </Section>

      <Section title="Forms">
        <Form
          styles={style({
            maxWidth: 288,
          })}
        >
          <CheckboxGroup label="Favorite sports">
            <Checkbox value="soccer">Soccer</Checkbox>
            <Checkbox value="baseball">Baseball</Checkbox>
            <Checkbox value="basketball">Basketball</Checkbox>
          </CheckboxGroup>
          <NumberField label="Width" defaultValue={1024} minValue={0} />
          <RadioGroup label="Favorite pet">
            <Radio value="dogs">Dogs</Radio>
            <Radio value="cats">Cats</Radio>
          </RadioGroup>
          <SearchField label="Search" />
          <Switch>Low power mode</Switch>
          <TextArea label="Description" />
          <TextField label="Email" />
          <TextField label="Password" />
        </Form>
      </Section>

      <Section title="Navigation">
        <div className={style({ minHeight: 176 })}>
          <Accordion>
            <Disclosure id="files">
              <DisclosureHeader>
                <DisclosureTitle>
                  Files
                </DisclosureTitle>
                <ActionButton><Edit aria-label="Edit" /></ActionButton>
              </DisclosureHeader>
              <DisclosurePanel>
                Files content
              </DisclosurePanel>
            </Disclosure>
            <Disclosure id="people">
              <DisclosureHeader>
                <DisclosureTitle>
                  People
                </DisclosureTitle>
              </DisclosureHeader>
              <DisclosurePanel>
                <TextField label="Name" styles={style({ maxWidth: 176 })} />
              </DisclosurePanel>
            </Disclosure>
          </Accordion>
        </div>
        <Breadcrumbs>
          <Breadcrumb id="home">Home</Breadcrumb>
          <Breadcrumb id="trendy">Trendy</Breadcrumb>
          <Breadcrumb id="march 2020 assets">March 2020 Assets</Breadcrumb>
        </Breadcrumbs>
        <Link
          href="https://www.imdb.com/title/tt6348138/"
          target="_blank"
          rel="noreferrer"
        >
          The missing link.
        </Link>
        <Link href="/foo">Foo</Link>
        <SegmentedControl aria-label="Time granularity" styles={style({width: 384})} isJustified>
          <SegmentedControlItem id="day">Day</SegmentedControlItem>
          <SegmentedControlItem id="week">Week</SegmentedControlItem>
          <SegmentedControlItem id="month">Month</SegmentedControlItem>
          <SegmentedControlItem id="year">Year</SegmentedControlItem>
        </SegmentedControl>
        <Tabs aria-label="History of Ancient Rome">
          <TabList>
            <Tab id="FoR">Founding of Rome</Tab>
            <Tab id="MaR">Monarchy and Republic</Tab>
            <Tab id="Emp">Empire</Tab>
          </TabList>
          <TabPanel id="FoR">
            Arma virumque cano, Troiae qui primus ab oris.
          </TabPanel>
          <TabPanel id="MaR">Senatus Populusque Romanus.</TabPanel>
          <TabPanel id="Emp">Alea jacta est.</TabPanel>
        </Tabs>
      </Section>

      <Section title="Overlays">
        <DialogTrigger>
          <ActionButton>Save</ActionButton>
          <AlertDialog
            title="Low Disk Space"
            variant="warning"
            primaryActionLabel="Confirm"
          >
            You are running low on disk space. Delete unnecessary files to
            free up space.
          </AlertDialog>
        </DialogTrigger>

        <ContextualHelp variant="info">
          <Heading>Need help?</Heading>
          <Content>
            <Text>
              If you are having issues accessing your account, contact our
              customer support team for help.
            </Text>
          </Content>
        </ContextualHelp>

        <ActionButton onPress={() => setIsDialogOpen(true)}>
          Show Dialog
        </ActionButton>
        <DialogContainer onDismiss={() => setIsDialogOpen(false)}>
          {isDialogOpen && (
            <AlertDialog
              title="Delete"
              variant="destructive"
              primaryActionLabel="Delete"
            >
              Are you sure you want to delete this item?
            </AlertDialog>
          )}
        </DialogContainer>

        <DialogTrigger>
          <ActionButton>Check connectivity</ActionButton>
          <Dialog>
            {({close}) => (
              <>
                <Heading>Internet Speed Test</Heading>
                <Header>Connection status: Connected</Header>

                <Content>
                  <Text>Start speed test?</Text>
                </Content>
                <ButtonGroup>
                  <Button variant="secondary" onPress={close}>
                    Cancel
                  </Button>
                  <Button variant="accent" onPress={close}>
                    Confirm
                  </Button>
                </ButtonGroup>
              </>
            )}
          </Dialog>
        </DialogTrigger>

        <DialogTrigger>
          <ActionButton>Illustration</ActionButton>
          <CustomDialog size="M">
            <div className={style({display: 'flex', flexDirection: 'column', rowGap: 8, alignItems: 'center'})}>
              <Checkmark />
              <Heading slot="title" styles={style({font: 'heading-lg', textAlign: 'center', marginY: 0})}>Thank you!</Heading>
              <p className={style({font: 'body', textAlign: 'center', marginY: 0})}>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
              <CloseButton styles={style({position: 'absolute', top: 12, insetEnd: 12})} />
            </div>
          </CustomDialog>
        </DialogTrigger>

        <DialogTrigger>
          <ActionButton>Disk Status</ActionButton>
          <Popover>
            <Heading styles={style({font: 'heading', marginTop: 0, marginBottom: 20})}>C://</Heading>

            <Content styles={style({font: 'ui'})}>
              <Text>50% disk space remaining.</Text>
            </Content>
          </Popover>
        </DialogTrigger>

        <TooltipTrigger>
          <ActionButton aria-label="Edit Name">
            <Edit />
          </ActionButton>
          <Tooltip>Change Name</Tooltip>
        </TooltipTrigger>
      </Section>

      <Section title="Pickers">
        <ComboBox label="Favorite Animal">
          <ComboBoxItem id="red panda">Red Panda</ComboBoxItem>
          <ComboBoxItem id="cat">Cat</ComboBoxItem>
          <ComboBoxItem id="dog">Dog</ComboBoxItem>
          <ComboBoxItem id="aardvark">Aardvark</ComboBoxItem>
          <ComboBoxItem id="kangaroo">Kangaroo</ComboBoxItem>
          <ComboBoxItem id="snake">Snake</ComboBoxItem>
        </ComboBox>

        <Picker label="Choose frequency">
          <PickerItem id="rarely">Rarely</PickerItem>
          <PickerItem id="sometimes">Sometimes</PickerItem>
          <PickerItem id="always">Always</PickerItem>
        </Picker>
      </Section>

      <Section title="Sliders">
        <RangeSlider label="Range" defaultValue={{ start: 12, end: 36 }} />

        <Slider label="Cookies to buy" defaultValue={12} />
      </Section>

      <Section title="Status">
        <Badge variant="positive">Badge</Badge>

        <Meter label="Storage space" variant="positive" value={35} />

        <ProgressBar label="Loading…" value={50} />

        <ProgressBar label="Loading…" isIndeterminate />

        <ProgressCircle aria-label="Loading…" value={50} />

        <ProgressCircle aria-label="Loading…" isIndeterminate />

        <StatusLight variant="positive">Ready</StatusLight>

        <TagGroup aria-label="Static TagGroup items example">
          <Tag>News</Tag>
          <Tag>Travel</Tag>
          <Tag>Gaming</Tag>
          <Tag>Shopping</Tag>
        </TagGroup>
        <InlineAlert>
          <Heading>Payment Information</Heading>
          <Content>
            Enter your billing address, shipping address, and payment method
            to complete your purchase.
          </Content>
        </InlineAlert>
      </Section>

      <Section title="Content">
        <Avatar
          src="https://i.imgur.com/kJOwAdv.png"
          alt="default Adobe avatar"
        />

        <AvatarGroup aria-label="Users">
          <Avatar
            src="https://i.imgur.com/kJOwAdv.png"
            alt="default Adobe avatar"
          />
          <Avatar
            src="https://i.imgur.com/kJOwAdv.png"
            alt="default Adobe avatar"
          />
          <Avatar
            src="https://i.imgur.com/kJOwAdv.png"
            alt="default Adobe avatar"
          />
          <Avatar
            src="https://i.imgur.com/kJOwAdv.png"
            alt="default Adobe avatar"
          />
        </AvatarGroup>

        <Content>Content is king</Content>

        <Footer>&copy; All rights reserved.</Footer>

        <Header>Cute cats</Header>

        <Heading level={4}>Edit</Heading>

        <IllustratedMessage>
          <Cloud />
          <Heading>No results</Heading>
          <Content>Try another search</Content>
        </IllustratedMessage>

        <Image src="https://i.imgur.com/Z7AzH2c.png" alt="Sky and roof" />

        <Keyboard>⌘V</Keyboard>

        <Text>Paste</Text>
      </Section>
    </>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


./src/index.js
File type: .js
/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

import React from 'react';
import { createRoot } from "react-dom/client";
import App from "./App";

const root = document.getElementById('root');
createRoot(root).render(<App />);


--------------------------------------------------
File End
--------------------------------------------------


./src/App.js
File type: .js
/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

import React, { useState } from "react";
import "@react-spectrum/s2/page.css";
import {
  ActionButton,
  ActionButtonGroup,
  ActionMenu,
  Button,
  ButtonGroup,
  Cell,
  Column,
  Divider,
  Heading,
  LinkButton,
  Menu,
  MenuItem,
  MenuTrigger,
  Picker,
  PickerItem,
  Row,
  SubmenuTrigger,
  TableBody,
  TableHeader,
  TableView,
  Text,
  ToggleButton,
  ToggleButtonGroup,
  TreeView,
  TreeViewItem,
  TreeViewItemContent
} from "@react-spectrum/s2";
import Edit from "@react-spectrum/s2/icons/Edit";
import FileTxt from "@react-spectrum/s2/icons/FileText";
import Folder from "@react-spectrum/s2/icons/Folder";
import Section from "./components/Section";
import { style } from "@react-spectrum/s2/style" with { type: "macro" };
import { CardViewExample } from "./components/CardViewExample";
import { CollectionCardsExample } from "./components/CollectionCardsExample";

const Lazy = React.lazy(() => import('./Lazy'));

function App() {
  let [isLazyLoaded, setLazyLoaded] = useState(false);
  let [cardViewState, setCardViewState] = useState({
    layout: 'grid',
    loadingState: 'idle',
  });
  let cardViewLoadingOptions = [
    {id: 'idle', label: 'Idle'},
    {id: 'loading', label: 'Loading'},
    {id: 'sorting', label: 'Sorting'},
    {id: 'loadingMore', label: 'Loading More'},
    {id: 'error', label: 'Error'},
  ];
  let cardViewLayoutOptions = [
    {id: 'grid', label: 'Grid'},
    {id: 'waterfall', label: 'Waterfall'}
  ];
  return (
    <main>
      <Heading
        styles={style({ font: "heading-xl", textAlign: "center" })}
        level={1}
      >
        Spectrum 2 + Webpack
      </Heading>
      <div
        className={style({
          maxWidth: 288,
          margin: "auto",
        })}
      >
        <Divider />
      </div>
      <div
        className={style({
          display: "flex",
          flexDirection: "column",
          gap: 16,
          alignItems: "center"
        })}
      >
        <Section title="Buttons">
          <ButtonGroup align="center" styles={style({maxWidth: '[100vw]'})}>
            <Button variant="primary">Primary</Button>
            <Button variant="secondary">Secondary</Button>
            <ActionButton>
              <Edit />
              <Text>Action Button</Text>
            </ActionButton>
            <ToggleButton>Toggle Button</ToggleButton>
            <LinkButton
              variant="primary"
              href="https://adobe.com"
              target="_blank"
            >
              Link Button
            </LinkButton>
            <ActionButtonGroup density="compact">
              <ActionButton>Cut</ActionButton>
              <ActionButton>Copy</ActionButton>
              <ActionButton>Paste</ActionButton>
            </ActionButtonGroup>
            <ToggleButtonGroup density="compact" selectionMode="multiple">
              <ToggleButton id="bold">Bold</ToggleButton>
              <ToggleButton id="italic">Italic</ToggleButton>
              <ToggleButton id="underline">Underline</ToggleButton>
            </ToggleButtonGroup>
          </ButtonGroup>
        </Section>

        <Section title="Collections">
          <ActionMenu>
            <MenuItem>Action Menu Item 1</MenuItem>
            <MenuItem>Action Menu Item 2</MenuItem>
            <MenuItem>Action Menu Item 3</MenuItem>
          </ActionMenu>
          <Picker
            label="CardView Loading State"
            items={cardViewLoadingOptions}
            selectedKey={cardViewState.loadingState}
            onSelectionChange={loadingState => setCardViewState({...cardViewState, loadingState})}>
            {item => <PickerItem id={item.id}>{item.label}</PickerItem>}
          </Picker>
          <Picker
            label="CardView Layout"
            items={cardViewLayoutOptions}
            selectedKey={cardViewState.layout}
            onSelectionChange={layout => setCardViewState({...cardViewState, layout})}>
            {item => <PickerItem id={item.id}>{item.label}</PickerItem>}
          </Picker>
          <CardViewExample {...cardViewState} />
          <Divider styles={style({maxWidth: 320, width: 'full', marginX: 'auto'})} />
          <CollectionCardsExample loadingState={cardViewState.loadingState} />
          <MenuTrigger>
            <ActionButton>Menu</ActionButton>
            <Menu onAction={(key) => alert(key.toString())}>
              <MenuItem id="cut">Cut</MenuItem>
              <MenuItem id="copy">Copy</MenuItem>
              <MenuItem id="paste">Paste</MenuItem>
              <MenuItem id="replace">Replace</MenuItem>
              <SubmenuTrigger>
                <MenuItem id="share">Share</MenuItem>
                <Menu onAction={(key) => alert(key.toString())}>
                  <MenuItem id="copy-ink">Copy Link</MenuItem>
                  <SubmenuTrigger>
                    <MenuItem id="email">Email</MenuItem>
                    <Menu onAction={(key) => alert(key.toString())}>
                      <MenuItem id="attachment">Email as Attachment</MenuItem>
                      <MenuItem id="link">Email as Link</MenuItem>
                    </Menu>
                  </SubmenuTrigger>
                  <MenuItem id="sms">SMS</MenuItem>
                </Menu>
              </SubmenuTrigger>
              <MenuItem id="delete">Delete</MenuItem>
            </Menu>
          </MenuTrigger>
          <MenuTrigger>
            <ActionButton>Menu Trigger</ActionButton>
            <Menu>
              <MenuItem href="/foo" routerOptions={{ scroll: false }}>
                Link to /foo
              </MenuItem>
              <MenuItem>Cut</MenuItem>
              <MenuItem>Copy</MenuItem>
              <MenuItem>Paste</MenuItem>
            </Menu>
          </MenuTrigger>
          <TableView aria-label="Files" styles={style({width: 320, height: 320})}>
            <TableHeader>
              <Column isRowHeader>Name</Column>
              <Column>Type</Column>
              <Column>Date Modified</Column>
              <Column>A</Column>
              <Column>B</Column>
            </TableHeader>
            <TableBody>
              <Row id="1">
                <Cell>Games</Cell>
                <Cell>File folder</Cell>
                <Cell>6/7/2020</Cell>
                <Cell>Dummy content</Cell>
                <Cell>Long long long long long long long cell</Cell>
              </Row>
              <Row id="2">
                <Cell>Program Files</Cell>
                <Cell>File folder</Cell>
                <Cell>4/7/2021</Cell>
                <Cell>Dummy content</Cell>
                <Cell>Long long long long long long long cell</Cell>
              </Row>
              <Row id="3">
                <Cell>bootmgr</Cell>
                <Cell>System file</Cell>
                <Cell>11/20/2010</Cell>
                <Cell>Dummy content</Cell>
                <Cell>Long long long long long long long cell</Cell>
              </Row>
            </TableBody>
          </TableView>
          <TreeView disabledKeys={['projects-1']} aria-label="test static tree">
            <TreeViewItem id="Photos" textValue="Photos">
              <TreeViewItemContent>
                <Text>Photos</Text>
                <Folder />
              </TreeViewItemContent>
            </TreeViewItem>
            <TreeViewItem id="projects" textValue="Projects">
              <TreeViewItemContent>
                <Text>Projects</Text>
                <Folder />
              </TreeViewItemContent>
              <TreeViewItem id="projects-1" textValue="Projects-1">
                <TreeViewItemContent>
                  <Text>Projects-1</Text>
                  <Folder />
                </TreeViewItemContent>
                <TreeViewItem id="projects-1A" textValue="Projects-1A">
                  <TreeViewItemContent>
                    <Text>Projects-1A</Text>
                    <FileTxt />
                  </TreeViewItemContent>
                </TreeViewItem>
              </TreeViewItem>
              <TreeViewItem id="projects-2" textValue="Projects-2">
                <TreeViewItemContent>
                  <Text>Projects-2</Text>
                  <FileTxt />
                </TreeViewItemContent>
              </TreeViewItem>
              <TreeViewItem id="projects-3" textValue="Projects-3">
                <TreeViewItemContent>
                  <Text>Projects-3</Text>
                  <FileTxt />
                </TreeViewItemContent>
              </TreeViewItem>
            </TreeViewItem>
          </TreeView>
        </Section>

        {!isLazyLoaded && <ActionButton onPress={() => setLazyLoaded(true)}>Load more</ActionButton>}
        {isLazyLoaded && <React.Suspense fallback={<>Loading</>}>
          <Lazy />
        </React.Suspense>}
      </div>
    </main>
  );
}

export default App;


--------------------------------------------------
File End
--------------------------------------------------


./src/index.html
File type: .html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Spectrum 2 + Webpack</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>


--------------------------------------------------
File End
--------------------------------------------------


./src/components/CollectionCardsExample.js
File type: .js

/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

import React from "react";
import { Card, CardView, Collection, CollectionCardPreview, Content, Image, SkeletonCollection, Text } from '@react-spectrum/s2';
import Folder from '@react-spectrum/s2/icons/Folder';
import { style } from "@react-spectrum/s2/style" with { type: "macro" };
import { useAsyncList } from 'react-stately';

const cardViewStyles = style({
  width: 'full',
  maxWidth: '[800px]',
  height: '[800px]',
  margin: 32
});

function TopicCard({topic}) {
  return (
    <Card href={topic.links.html} target="_blank" textValue={topic.title}>
      <CollectionCardPreview>
        {topic.preview_photos.slice(0, 4).map(photo => (
          <Image key={photo.id} alt="" src={photo.urls.small} />
        ))}
      </CollectionCardPreview>
      <Content>
        <Text slot="title">{topic.title}</Text>
        <div className={style({display: 'flex', alignItems: 'center', gap: 8})}>
          <Folder />
          <Text slot="description">{topic.total_photos.toLocaleString()} photos</Text>
        </div>
      </Content>
    </Card>
  );
}

export const CollectionCardsExample = (props) => {
  let list = useAsyncList({
    async load({signal, cursor}) {
      let page = cursor || 1;
      let res = await fetch(
        `https://api.unsplash.com/topics?page=${page}&per_page=30&client_id=AJuU-FPh11hn7RuumUllp4ppT8kgiLS7LtOHp_sp4nc`,
        {signal}
      );
      let items = (await res.json()).filter((topic) => !!topic.preview_photos);
      return {items, cursor: items.length ? page + 1 : null};
    }
  });

  let loadingState = props.loadingState === 'idle' ? list.loadingState : props.loadingState;
  let items = loadingState === 'loading' ? [] : list.items;

  return (
    <CardView
      aria-label="Topics"
      {...props}
      loadingState={loadingState}
      onLoadMore={props.loadingState === 'idle' ? list.loadMore : undefined}
      styles={cardViewStyles}>
      <Collection items={items}>
        {topic => <TopicCard topic={topic} />}
      </Collection>
      {(loadingState === 'loading' || loadingState === 'loadingMore') && (
        <SkeletonCollection>
          {() => (
            <TopicCard
              topic={{
                id: Math.random().toString(36),
                title: 'Topic title',
                total_photos: 80,
                links: {html: ''},
                preview_photos: [
                  {id: 'a', urls: {small: ''}},
                  {id: 'b', urls: {small: ''}},
                  {id: 'c', urls: {small: ''}},
                  {id: 'd', urls: {small: ''}}
                ]
              }} />
          )}
        </SkeletonCollection>
      )}
    </CardView>
  );
};

--------------------------------------------------
File End
--------------------------------------------------


./src/components/Section.js
File type: .js
import React from "react";
import { Heading } from "@react-spectrum/s2";
import { style } from "@react-spectrum/s2/style" with { type: "macro" };

export default function Section(props) {
  let { title, children } = props;
  return (
    <div className={style({ marginY: 8 })}>
      <Heading
        styles={style({
          textAlign: "center",
          font: "heading-lg",
        })}
        id={title.toLowerCase()}
        level={2}
      >
        {title}
      </Heading>
      <div
        className={style({
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          gap: 16,
        })}
      >
        {children}
      </div>
    </div>
  );
}


--------------------------------------------------
File End
--------------------------------------------------


./src/components/CardViewExample.js
File type: .js
/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

import React  from "react";
import { ActionMenu, Avatar, Card, CardPreview, CardView, Collection, CollectionCardPreview, Content, Image, MenuItem, SkeletonCollection, Text } from '@react-spectrum/s2';
import Folder from '@react-spectrum/s2/icons/Folder';
import ErrorIcon from '@react-spectrum/s2/illustrations/linear/AlertNotice';
import { style } from "@react-spectrum/s2/style" with { type: "macro" };
import { useAsyncList } from 'react-stately';

const cardViewStyles = style({
  width: 'full',
  maxWidth: '[800px]',
  height: '[800px]',
  margin: 32
});

const avatarSize = {
  XS: 16,
  S: 20,
  M: 24,
  L: 28,
  XL: 32
};

function PhotoCard({item, layout}) {
  return (
    <Card id={item.id} textValue={item.description || item.alt_description}>
      {({size}) => (<>
        <CardPreview>
          <Image
            src={item.urls.regular}
            styles={style({
              width: 'full',
              pointerEvents: 'none'
            })}
            // TODO - should we have a safe `dynamicStyles` or something for this?
            UNSAFE_style={{
              aspectRatio: layout === 'waterfall' ? `${item.width} / ${item.height}` : '4/3',
              objectFit: layout === 'waterfall' ? 'contain' : 'cover'
            }}
            renderError={() => (
              <div className={style({display: 'flex', alignItems: 'center', justifyContent: 'center', size: 'full'})}>
                <ErrorIcon size="S" />
              </div>
            )} />
        </CardPreview>
        <Content>
          <Text slot="title">{item.description || item.alt_description}</Text>
          {size !== 'XS' && <ActionMenu>
            <MenuItem>Test</MenuItem>
          </ActionMenu>}
          <div className={style({display: 'flex', alignItems: 'center', gap: 8, gridArea: 'description'})}>
            <Avatar src={item.user.profile_image.small} size={avatarSize[size]} />
            <Text slot="description">{item.user.name}</Text>
          </div>
        </Content>
      </>)}
    </Card>
  );
}

export const CardViewExample = (props) => {
  let list = useAsyncList({
    async load({signal, cursor, items}) {
      let page = cursor || 1;
      let res = await fetch(
        `https://api.unsplash.com/topics/nature/photos?page=${page}&per_page=30&client_id=AJuU-FPh11hn7RuumUllp4ppT8kgiLS7LtOHp_sp4nc`,
        {signal}
      );
      let nextItems = await res.json();
      // Filter duplicates which might be returned by the API.
      let existingKeys = new Set(items.map(i => i.id));
      nextItems = nextItems.filter(i => !existingKeys.has(i.id) && (i.description || i.alt_description));
      return {items: nextItems, cursor: nextItems.length ? page + 1 : null};
    }
  });

  let loadingState = props.loadingState === 'idle' ? list.loadingState : props.loadingState;
  let items = loadingState === 'loading' ? [] : list.items;

  return (
    <CardView
      aria-label="Nature photos"
      {...props}
      loadingState={loadingState}
      onLoadMore={props.loadingState === 'idle' ? list.loadMore : undefined}
      styles={cardViewStyles}>
      <Collection items={items} dependencies={[props.layout]}>
        {item => <PhotoCard item={item} layout={props.layout || 'grid'} />}
      </Collection>
      {(loadingState === 'loading' || loadingState === 'loadingMore') && (
        <SkeletonCollection>
          {() => (
            <PhotoCard
              item={{
                id: Math.random(),
                user: {name: 'Devon Govett', profile_image: {small: ''}},
                urls: {regular: ''},
                description: 'This is a fake description. Kinda long so it wraps to a new line.',
                alt_description: '',
                width: 400,
                height: 200 + Math.max(0, Math.round(Math.random() * 400))
              }}
              layout={props.layout || 'grid'} />
          )}
        </SkeletonCollection>
      )}
    </CardView>
  );
};

function TopicCard({topic}) {
  return (
    <Card href={topic.links.html} target="_blank" textValue={topic.title}>
      <CollectionCardPreview>
        {topic.preview_photos.slice(0, 4).map(photo => (
          <Image key={photo.id} alt="" src={photo.urls.small} />
        ))}
      </CollectionCardPreview>
      <Content>
        <Text slot="title">{topic.title}</Text>
        <div className={style({display: 'flex', alignItems: 'center', gap: 8})}>
          <Folder />
          <Text slot="description">{topic.total_photos.toLocaleString()} photos</Text>
        </div>
      </Content>
    </Card>
  );
}

export const CollectionCardsExample = (props) => {
  let list = useAsyncList({
    async load({signal, cursor}) {
      let page = cursor || 1;
      let res = await fetch(
        `https://api.unsplash.com/topics?page=${page}&per_page=30&client_id=AJuU-FPh11hn7RuumUllp4ppT8kgiLS7LtOHp_sp4nc`,
        {signal}
      );
      let items = (await res.json()).filter((topic) => !!topic.preview_photos);
      return {items, cursor: items.length ? page + 1 : null};
    }
  });

  let loadingState = props.loadingState === 'idle' ? list.loadingState : props.loadingState;
  let items = loadingState === 'loading' ? [] : list.items;

  return (
    <CardView
      aria-label="Topics"
      {...props}
      loadingState={loadingState}
      onLoadMore={props.loadingState === 'idle' ? list.loadMore : undefined}
      styles={cardViewStyles}>
      <Collection items={items}>
        {topic => <TopicCard topic={topic} />}
      </Collection>
      {(loadingState === 'loading' || loadingState === 'loadingMore') && (
        <SkeletonCollection>
          {() => (
            <TopicCard
              topic={{
                id: Math.random().toString(36),
                title: 'Topic title',
                total_photos: 80,
                links: {html: ''},
                preview_photos: [
                  {id: 'a', urls: {small: ''}},
                  {id: 'b', urls: {small: ''}},
                  {id: 'c', urls: {small: ''}},
                  {id: 'd', urls: {small: ''}}
                ]
              }} />
          )}
        </SkeletonCollection>
      )}
    </CardView>
  );
};

--------------------------------------------------
File End
--------------------------------------------------
