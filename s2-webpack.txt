Folder Structure
--------------------------------------------------
./
    webpack.config.js
    README.md
    .gitignore
    package.json
    src/
        index.js
        App.js
        index.html
        components/


File Contents
--------------------------------------------------


./webpack.config.js
File type: .js
const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const CssMinimizerPlugin = require("css-minimizer-webpack-plugin");
const {SwcMinifyWebpackPlugin} = require("swc-minify-webpack-plugin");
const {browserslistToTargets} = require('lightningcss');
const browserslist = require('browserslist');
const macros = require("unplugin-parcel-macros");

// Adjust this to target the browsers your product supports.
// https://browserslist.dev/
const BROWSERSLIST = 'last 2 Chrome versions, last 2 Safari versions, last 2 Firefox versions';

module.exports = (env, argv) => ({
  entry: path.join(__dirname, "src", "index.js"),
  output: {
    path: path.resolve(__dirname, "dist"),
  },
  mode: argv.mode || "development",
  module: {
    rules: [
      {
        // Use SWC to compile JSX. You could also use babel-loader instead.
        test: /\.?js$/,
        exclude: /node_modules/,
        use: {
          loader: "swc-loader",
          options: {
            env: {
              targets: BROWSERSLIST
            },
            jsc: {
              parser: {
                jsx: true
              }
            }
          },
        },
      },
      {
        // Use mini-css-extract-plugin instead of style-loader to that CSS is extracted
        // into a standalone .css bundle instead of inlined into JS via <style> tags.
        test: /\.css$/i,
        use: [MiniCssExtractPlugin.loader, "css-loader"],
      }
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: path.join(__dirname, "src", "index.html"),
    }),
    // Enable style macros.
    macros.webpack(),
    // Extract CSS bundles.
    new MiniCssExtractPlugin({
      // Use content hash in filename for long term cacheability.
      filename: "[name].[contenthash].css",
      // Ignore warnings about CSS order. Style macros generate atomic CSS,
      // which is resiliant to ordering differences.
      ignoreOrder: true,
    })
  ],
  optimization: {
    // Always enable minimizer plugins (even in development), to reduce duplicate CSS rules.
    minimize: true,
    minimizer: [
      // Minify JavaScript during the production build only.
      // (Used SWC here, but you can also use Terser if you prefer.)
      argv.mode === 'production'
        ? new SwcMinifyWebpackPlugin()
        : null,
      // Use lightningcss to compile CSS. This removes duplicate rules and outputs compatible CSS for your browserslist.
      // In production it also minifies.
      new CssMinimizerPlugin({
        minify: CssMinimizerPlugin.lightningCssMinify,
        minimizerOptions: {
          minify: argv.mode === 'production',
          targets: browserslistToTargets(browserslist(BROWSERSLIST))
        }
      })
    ],
    splitChunks: {
      cacheGroups: {
        // Bundle all S2 and style-macro generated CSS into a single bundle instead of code splitting.
        // Because atomic CSS has so much overlap between components, loading all CSS up front results in
        // smaller bundles instead of producing duplication between pages.
        s2: {
          name: 's2-styles',
          test(module) {
            return module.type === 'css/mini-extract' && (module.identifier().includes('@react-spectrum/s2') || /\.macro-(.*?)\.css/.test(module.identifier()));
          },
          chunks: 'all',
          enforce: true
        }
      }
    }
  }
});


--------------------------------------------------
File End
--------------------------------------------------


./README.md
File type: .md
# Webpack 5 example

This is a [Webpack](https://webpack.js.org/) project with a minimal React configuration.

## Getting Started

First, run the development server:

```bash
yarn install
yarn dev
```

Open [http://localhost:8080](http://localhost:8080) with your browser to see the result.

style-macro and React Spectrum - Spectrum 2 have been added to `src/App.js` to show an example of a Spectrum 2 styled component. This file does client side rendering. The page auto-updates as you edit the file.

## Macros config

Edit the webpack.config.js to add an import for the plugin and add a webpack config that adds the webpack version of the macros plugin. An empty config file would be updated to look like the following.

```
const macros = require("unplugin-parcel-macros");

module.exports = {
  // ...
  plugins: [
    // ...
    macros.webpack(),
    // ...
  ],
};
```

To use the spectrum-theme via macros, pass your styles object to the style() macro and set the result as a new function. This new function or style() should be used within a `className` prop to style your html elements. Use the `styles` prop on React Spectrum components.

```jsx
<div className={style({marginStart: 16})}>
  Hello Spectrum 2!
</div>
```

```jsx
<Button styles={style({marginStart: 16})}>
  Hello Spectrum 2!
</Button>
```

## Application setup

Please include the page level CSS in the root of your application to configure and support the light and dark themes.

```
import "@react-spectrum/s2/page.css";
```


--------------------------------------------------
File End
--------------------------------------------------


./package.json
File type: .json
{
  "name": "webpack-5-example",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "packageManager": "yarn@1.22.22",
  "scripts": {
    "dev": "webpack serve",
    "build": "webpack --mode production"
  },
  "dependencies": {
    "@react-spectrum/s2": "latest",
    "react": "^19.1.0",
    "react-dom": "^19.1.0"
  },
  "devDependencies": {
    "css-loader": "^7.1.2",
    "css-minimizer-webpack-plugin": "^7.0.2",
    "html-webpack-plugin": "^5.6.3",
    "lightningcss": "^1.30.1",
    "mini-css-extract-plugin": "^2.9.2",
    "style-loader": "^4.0.0",
    "swc-loader": "^0.2.6",
    "swc-minify-webpack-plugin": "^2.1.3",
    "unplugin-parcel-macros": "0.1.1",
    "webpack": "^5.99.9",
    "webpack-cli": "^6.0.1",
    "webpack-dev-server": "^5.2.2"
  }
}


--------------------------------------------------
File End
--------------------------------------------------


./src/index.js
File type: .js
import React from 'react';
import { createRoot } from "react-dom/client";
import App from "./App";

const root = document.getElementById('root');
createRoot(root).render(<App />);


--------------------------------------------------
File End
--------------------------------------------------


./src/App.js
File type: .js

import React, { useState } from "react";
import "@react-spectrum/s2/page.css";
import {
  Divider,
  Heading,
  Text,
  TreeView,
  TreeViewItem,
  TreeViewItemContent
} from "@react-spectrum/s2";
import FileTxt from "@react-spectrum/s2/icons/FileText";
import Folder from "@react-spectrum/s2/icons/Folder";
import { style } from "@react-spectrum/s2/style" with { type: "macro" };

function App() {
  return (
    <main>

      <div
        className={style({
          display: "flex",
          flexDirection: "column",
          gap: 16,
          alignItems: "center"
        })}
      >
        <TreeView disabledKeys={['projects-1']} aria-label="test static tree">
          <TreeViewItem id="Photos" textValue="Photos">
            <TreeViewItemContent>
              <Text>Photos</Text>
              <Folder />
            </TreeViewItemContent>
          </TreeViewItem>
          <TreeViewItem id="projects" textValue="Projects">
            <TreeViewItemContent>
              <Text>Projects</Text>
              <Folder />
            </TreeViewItemContent>
            <TreeViewItem id="projects-1" textValue="Projects-1">
              <TreeViewItemContent>
                <Text>Projects-1</Text>
                <Folder />
              </TreeViewItemContent>
              <TreeViewItem id="projects-1A" textValue="Projects-1A">
                <TreeViewItemContent>
                  <Text>Projects-1A</Text>
                  <FileTxt />
                </TreeViewItemContent>
              </TreeViewItem>
            </TreeViewItem>
            <TreeViewItem id="projects-2" textValue="Projects-2">
              <TreeViewItemContent>
                <Text>Projects-2</Text>
                <FileTxt />
              </TreeViewItemContent>
            </TreeViewItem>
            <TreeViewItem id="projects-3" textValue="Projects-3">
              <TreeViewItemContent>
                <Text>Projects-3</Text>
                <FileTxt />
              </TreeViewItemContent>
            </TreeViewItem>
          </TreeViewItem>
        </TreeView>



      </div>
    </main>
  );
}

export default App;


--------------------------------------------------
File End
--------------------------------------------------


./src/index.html
File type: .html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Spectrum 2 + Webpack</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>


--------------------------------------------------
File End
--------------------------------------------------
